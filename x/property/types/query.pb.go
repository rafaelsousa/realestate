// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: property/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetOwnerRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetOwnerRequest) Reset()         { *m = QueryGetOwnerRequest{} }
func (m *QueryGetOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOwnerRequest) ProtoMessage()    {}
func (*QueryGetOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9e12b59533a72c7, []int{0}
}
func (m *QueryGetOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOwnerRequest.Merge(m, src)
}
func (m *QueryGetOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOwnerRequest proto.InternalMessageInfo

func (m *QueryGetOwnerRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetOwnerResponse struct {
	Owner *Owner `protobuf:"bytes,1,opt,name=Owner,proto3" json:"Owner,omitempty"`
}

func (m *QueryGetOwnerResponse) Reset()         { *m = QueryGetOwnerResponse{} }
func (m *QueryGetOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOwnerResponse) ProtoMessage()    {}
func (*QueryGetOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9e12b59533a72c7, []int{1}
}
func (m *QueryGetOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOwnerResponse.Merge(m, src)
}
func (m *QueryGetOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOwnerResponse proto.InternalMessageInfo

func (m *QueryGetOwnerResponse) GetOwner() *Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

type QueryAllOwnerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOwnerRequest) Reset()         { *m = QueryAllOwnerRequest{} }
func (m *QueryAllOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOwnerRequest) ProtoMessage()    {}
func (*QueryAllOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9e12b59533a72c7, []int{2}
}
func (m *QueryAllOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOwnerRequest.Merge(m, src)
}
func (m *QueryAllOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOwnerRequest proto.InternalMessageInfo

func (m *QueryAllOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOwnerResponse struct {
	Owner      []*Owner            `protobuf:"bytes,1,rep,name=Owner,proto3" json:"Owner,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOwnerResponse) Reset()         { *m = QueryAllOwnerResponse{} }
func (m *QueryAllOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOwnerResponse) ProtoMessage()    {}
func (*QueryAllOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9e12b59533a72c7, []int{3}
}
func (m *QueryAllOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOwnerResponse.Merge(m, src)
}
func (m *QueryAllOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOwnerResponse proto.InternalMessageInfo

func (m *QueryAllOwnerResponse) GetOwner() []*Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *QueryAllOwnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPropertyRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPropertyRequest) Reset()         { *m = QueryGetPropertyRequest{} }
func (m *QueryGetPropertyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPropertyRequest) ProtoMessage()    {}
func (*QueryGetPropertyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9e12b59533a72c7, []int{4}
}
func (m *QueryGetPropertyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPropertyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPropertyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPropertyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPropertyRequest.Merge(m, src)
}
func (m *QueryGetPropertyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPropertyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPropertyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPropertyRequest proto.InternalMessageInfo

func (m *QueryGetPropertyRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPropertyResponse struct {
	Property *Property `protobuf:"bytes,1,opt,name=Property,proto3" json:"Property,omitempty"`
}

func (m *QueryGetPropertyResponse) Reset()         { *m = QueryGetPropertyResponse{} }
func (m *QueryGetPropertyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPropertyResponse) ProtoMessage()    {}
func (*QueryGetPropertyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9e12b59533a72c7, []int{5}
}
func (m *QueryGetPropertyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPropertyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPropertyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPropertyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPropertyResponse.Merge(m, src)
}
func (m *QueryGetPropertyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPropertyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPropertyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPropertyResponse proto.InternalMessageInfo

func (m *QueryGetPropertyResponse) GetProperty() *Property {
	if m != nil {
		return m.Property
	}
	return nil
}

type QueryAllPropertyRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPropertyRequest) Reset()         { *m = QueryAllPropertyRequest{} }
func (m *QueryAllPropertyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPropertyRequest) ProtoMessage()    {}
func (*QueryAllPropertyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9e12b59533a72c7, []int{6}
}
func (m *QueryAllPropertyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPropertyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPropertyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPropertyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPropertyRequest.Merge(m, src)
}
func (m *QueryAllPropertyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPropertyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPropertyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPropertyRequest proto.InternalMessageInfo

func (m *QueryAllPropertyRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPropertyResponse struct {
	Property   []*Property         `protobuf:"bytes,1,rep,name=Property,proto3" json:"Property,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPropertyResponse) Reset()         { *m = QueryAllPropertyResponse{} }
func (m *QueryAllPropertyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPropertyResponse) ProtoMessage()    {}
func (*QueryAllPropertyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9e12b59533a72c7, []int{7}
}
func (m *QueryAllPropertyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPropertyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPropertyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPropertyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPropertyResponse.Merge(m, src)
}
func (m *QueryAllPropertyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPropertyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPropertyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPropertyResponse proto.InternalMessageInfo

func (m *QueryAllPropertyResponse) GetProperty() []*Property {
	if m != nil {
		return m.Property
	}
	return nil
}

func (m *QueryAllPropertyResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListAllPropertiesRequest struct {
	OwnerAddr string `protobuf:"bytes,1,opt,name=owner_addr,json=ownerAddr,proto3" json:"owner_addr,omitempty"`
}

func (m *QueryListAllPropertiesRequest) Reset()         { *m = QueryListAllPropertiesRequest{} }
func (m *QueryListAllPropertiesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListAllPropertiesRequest) ProtoMessage()    {}
func (*QueryListAllPropertiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9e12b59533a72c7, []int{8}
}
func (m *QueryListAllPropertiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAllPropertiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAllPropertiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAllPropertiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAllPropertiesRequest.Merge(m, src)
}
func (m *QueryListAllPropertiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAllPropertiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAllPropertiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAllPropertiesRequest proto.InternalMessageInfo

func (m *QueryListAllPropertiesRequest) GetOwnerAddr() string {
	if m != nil {
		return m.OwnerAddr
	}
	return ""
}

type QueryListAllPropertiesResponse struct {
	Property   []*Property         `protobuf:"bytes,1,rep,name=Property,proto3" json:"Property,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListAllPropertiesResponse) Reset()         { *m = QueryListAllPropertiesResponse{} }
func (m *QueryListAllPropertiesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListAllPropertiesResponse) ProtoMessage()    {}
func (*QueryListAllPropertiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9e12b59533a72c7, []int{9}
}
func (m *QueryListAllPropertiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAllPropertiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAllPropertiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAllPropertiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAllPropertiesResponse.Merge(m, src)
}
func (m *QueryListAllPropertiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAllPropertiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAllPropertiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAllPropertiesResponse proto.InternalMessageInfo

func (m *QueryListAllPropertiesResponse) GetProperty() []*Property {
	if m != nil {
		return m.Property
	}
	return nil
}

func (m *QueryListAllPropertiesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetOwnerRequest)(nil), "rafaelsousa.realestate.property.QueryGetOwnerRequest")
	proto.RegisterType((*QueryGetOwnerResponse)(nil), "rafaelsousa.realestate.property.QueryGetOwnerResponse")
	proto.RegisterType((*QueryAllOwnerRequest)(nil), "rafaelsousa.realestate.property.QueryAllOwnerRequest")
	proto.RegisterType((*QueryAllOwnerResponse)(nil), "rafaelsousa.realestate.property.QueryAllOwnerResponse")
	proto.RegisterType((*QueryGetPropertyRequest)(nil), "rafaelsousa.realestate.property.QueryGetPropertyRequest")
	proto.RegisterType((*QueryGetPropertyResponse)(nil), "rafaelsousa.realestate.property.QueryGetPropertyResponse")
	proto.RegisterType((*QueryAllPropertyRequest)(nil), "rafaelsousa.realestate.property.QueryAllPropertyRequest")
	proto.RegisterType((*QueryAllPropertyResponse)(nil), "rafaelsousa.realestate.property.QueryAllPropertyResponse")
	proto.RegisterType((*QueryListAllPropertiesRequest)(nil), "rafaelsousa.realestate.property.QueryListAllPropertiesRequest")
	proto.RegisterType((*QueryListAllPropertiesResponse)(nil), "rafaelsousa.realestate.property.QueryListAllPropertiesResponse")
}

func init() { proto.RegisterFile("property/query.proto", fileDescriptor_d9e12b59533a72c7) }

var fileDescriptor_d9e12b59533a72c7 = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0x3b, 0xa9, 0xd5, 0x76, 0x8a, 0x1e, 0x86, 0x4a, 0x4b, 0xb0, 0xab, 0xec, 0x21, 0x36,
	0x16, 0x67, 0x4c, 0x8a, 0xa5, 0x42, 0x89, 0x44, 0xd4, 0x5e, 0x0a, 0xd6, 0x80, 0x17, 0x0f, 0xca,
	0xa4, 0x3b, 0xc6, 0x85, 0xed, 0xce, 0x76, 0x67, 0xa2, 0x86, 0xd2, 0x8b, 0x9f, 0x40, 0xf0, 0xee,
	0xdd, 0x3f, 0x07, 0x2f, 0xe2, 0x57, 0xf0, 0x58, 0x10, 0xc4, 0xa3, 0x24, 0x7e, 0x10, 0xc9, 0xcc,
	0xec, 0x6e, 0x77, 0x9b, 0xb0, 0xdb, 0xd0, 0x83, 0xb7, 0x65, 0xf2, 0x3e, 0xef, 0xfb, 0x7b, 0x9e,
	0x61, 0x5e, 0x02, 0x17, 0x82, 0x90, 0x07, 0x2c, 0x94, 0x3d, 0xb2, 0xdf, 0x65, 0x61, 0x0f, 0x07,
	0x21, 0x97, 0x1c, 0x5d, 0x0d, 0xe9, 0x0b, 0xca, 0x3c, 0xc1, 0xbb, 0x82, 0xe2, 0x90, 0x51, 0x8f,
	0x09, 0x49, 0x25, 0xc3, 0x51, 0x71, 0xf9, 0x4a, 0x87, 0xf3, 0x8e, 0xc7, 0x08, 0x0d, 0x5c, 0x42,
	0x7d, 0x9f, 0x4b, 0x2a, 0x5d, 0xee, 0x0b, 0x2d, 0x2f, 0xdf, 0xd8, 0xe5, 0x62, 0x8f, 0x0b, 0xd2,
	0xa6, 0x82, 0xe9, 0xbe, 0xe4, 0x55, 0xad, 0xcd, 0x24, 0xad, 0x91, 0x80, 0x76, 0x5c, 0x5f, 0x15,
	0x9b, 0xda, 0x04, 0x80, 0xbf, 0xf6, 0x59, 0x68, 0x4e, 0x17, 0xe3, 0xd3, 0xe8, 0x43, 0xff, 0x60,
	0x57, 0xe0, 0xc2, 0xe3, 0x61, 0xc3, 0x2d, 0x26, 0x1f, 0x0d, 0xeb, 0x5b, 0x6c, 0xbf, 0xcb, 0x84,
	0x44, 0x97, 0x60, 0xc9, 0x75, 0x96, 0xc0, 0x35, 0xb0, 0x72, 0xae, 0x55, 0x72, 0x1d, 0xfb, 0x09,
	0xbc, 0x9c, 0xa9, 0x13, 0x01, 0xf7, 0x05, 0x43, 0x9b, 0x70, 0x46, 0x1d, 0xa8, 0xda, 0xf9, 0x7a,
	0x05, 0xe7, 0x58, 0xc5, 0x5a, 0xae, 0x45, 0xf6, 0x33, 0x33, 0xbe, 0xe9, 0x79, 0xa9, 0xf1, 0x0f,
	0x21, 0x4c, 0x9c, 0xc5, 0xad, 0x75, 0x0c, 0x78, 0x18, 0x03, 0xd6, 0xf1, 0x9a, 0x18, 0xf0, 0x0e,
	0xed, 0x30, 0xa3, 0x6d, 0x1d, 0x53, 0xda, 0x1f, 0x80, 0xe1, 0x4e, 0x06, 0x9c, 0xe4, 0x9e, 0x3e,
	0x35, 0x37, 0xda, 0x4a, 0xf1, 0x95, 0x14, 0xdf, 0xf5, 0x5c, 0x3e, 0x3d, 0x3a, 0x05, 0x58, 0x85,
	0x8b, 0x51, 0xae, 0x3b, 0x66, 0xd2, 0xb8, 0x2b, 0xa0, 0x70, 0xe9, 0x64, 0xa9, 0x71, 0xf3, 0x00,
	0xce, 0x46, 0x67, 0x26, 0xad, 0x6a, 0xae, 0xa1, 0xb8, 0x49, 0x2c, 0xb5, 0xa9, 0xa1, 0x69, 0x7a,
	0x5e, 0x96, 0xe6, 0xac, 0x6e, 0xe4, 0x13, 0x30, 0x36, 0x52, 0x33, 0x46, 0xda, 0x98, 0x9e, 0xd0,
	0xc6, 0xd9, 0xdd, 0x4e, 0x03, 0x2e, 0x2b, 0xd6, 0x6d, 0x57, 0xc8, 0x84, 0xd7, 0x65, 0x22, 0x4a,
	0x65, 0x19, 0x42, 0xf5, 0xcc, 0x9e, 0x53, 0xc7, 0xd1, 0x4f, 0x60, 0xae, 0x35, 0xa7, 0x4e, 0x9a,
	0x8e, 0x13, 0xda, 0x5f, 0x01, 0xb4, 0xc6, 0x35, 0xf8, 0x3f, 0x2d, 0xd7, 0xbf, 0x5c, 0x80, 0x33,
	0x0a, 0x19, 0x7d, 0x06, 0xe6, 0x89, 0xa0, 0xdb, 0xb9, 0x44, 0xa3, 0x76, 0x48, 0x79, 0xfd, 0xb4,
	0x32, 0x8d, 0x63, 0xaf, 0xbd, 0xfd, 0xf9, 0xf7, 0x7d, 0xe9, 0x26, 0x5a, 0x25, 0xc7, 0xf4, 0x24,
	0xd1, 0x93, 0xf4, 0x8a, 0x23, 0x07, 0xae, 0x73, 0x88, 0x3e, 0x02, 0x38, 0xab, 0xda, 0x34, 0x3d,
	0xaf, 0x28, 0x70, 0x66, 0xeb, 0x14, 0x05, 0xce, 0xee, 0x12, 0x1b, 0x2b, 0xe0, 0x15, 0x54, 0x29,
	0x06, 0x8c, 0xbe, 0x83, 0xe4, 0xd2, 0xd1, 0x46, 0xe1, 0x94, 0x32, 0x4f, 0xb2, 0x7c, 0x67, 0x02,
	0xa5, 0x21, 0x5e, 0x57, 0xc4, 0xb7, 0x10, 0xce, 0x25, 0x8e, 0x3f, 0x54, 0xca, 0xdf, 0x00, 0x9c,
	0x8f, 0x9a, 0x0d, 0x83, 0xde, 0x28, 0x9c, 0xd8, 0x84, 0xf0, 0x23, 0xb6, 0x84, 0x5d, 0x53, 0xf0,
	0xab, 0xa8, 0x5a, 0x18, 0x1e, 0xfd, 0x02, 0xf0, 0x62, 0xea, 0xfd, 0xa1, 0x46, 0xb1, 0xf9, 0xe3,
	0x5e, 0x7e, 0xf9, 0xee, 0xc4, 0x7a, 0xe3, 0xe2, 0xbe, 0x72, 0xd1, 0x40, 0x9b, 0xb9, 0x2e, 0x3c,
	0x57, 0xc8, 0x20, 0x6e, 0x40, 0x0e, 0x92, 0x8d, 0x73, 0x78, 0x6f, 0xfb, 0x47, 0xdf, 0x02, 0x47,
	0x7d, 0x0b, 0xfc, 0xe9, 0x5b, 0xe0, 0xdd, 0xc0, 0x9a, 0x3a, 0x1a, 0x58, 0x53, 0xbf, 0x07, 0xd6,
	0xd4, 0xd3, 0x7a, 0xc7, 0x95, 0x2f, 0xbb, 0x6d, 0xbc, 0xcb, 0xf7, 0xc6, 0x4d, 0x78, 0x93, 0xcc,
	0x90, 0xbd, 0x80, 0x89, 0xf6, 0x79, 0xf5, 0xa7, 0x60, 0xed, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x0c, 0xf4, 0xf3, 0x24, 0xc6, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// this line is used by starport scaffolding # 2
	Owner(ctx context.Context, in *QueryGetOwnerRequest, opts ...grpc.CallOption) (*QueryGetOwnerResponse, error)
	OwnerAll(ctx context.Context, in *QueryAllOwnerRequest, opts ...grpc.CallOption) (*QueryAllOwnerResponse, error)
	Property(ctx context.Context, in *QueryGetPropertyRequest, opts ...grpc.CallOption) (*QueryGetPropertyResponse, error)
	PropertyAll(ctx context.Context, in *QueryAllPropertyRequest, opts ...grpc.CallOption) (*QueryAllPropertyResponse, error)
	// Returns all properties from a specific owner
	AllProperties(ctx context.Context, in *QueryListAllPropertiesRequest, opts ...grpc.CallOption) (*QueryListAllPropertiesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Owner(ctx context.Context, in *QueryGetOwnerRequest, opts ...grpc.CallOption) (*QueryGetOwnerResponse, error) {
	out := new(QueryGetOwnerResponse)
	err := c.cc.Invoke(ctx, "/rafaelsousa.realestate.property.Query/Owner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OwnerAll(ctx context.Context, in *QueryAllOwnerRequest, opts ...grpc.CallOption) (*QueryAllOwnerResponse, error) {
	out := new(QueryAllOwnerResponse)
	err := c.cc.Invoke(ctx, "/rafaelsousa.realestate.property.Query/OwnerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Property(ctx context.Context, in *QueryGetPropertyRequest, opts ...grpc.CallOption) (*QueryGetPropertyResponse, error) {
	out := new(QueryGetPropertyResponse)
	err := c.cc.Invoke(ctx, "/rafaelsousa.realestate.property.Query/Property", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PropertyAll(ctx context.Context, in *QueryAllPropertyRequest, opts ...grpc.CallOption) (*QueryAllPropertyResponse, error) {
	out := new(QueryAllPropertyResponse)
	err := c.cc.Invoke(ctx, "/rafaelsousa.realestate.property.Query/PropertyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllProperties(ctx context.Context, in *QueryListAllPropertiesRequest, opts ...grpc.CallOption) (*QueryListAllPropertiesResponse, error) {
	out := new(QueryListAllPropertiesResponse)
	err := c.cc.Invoke(ctx, "/rafaelsousa.realestate.property.Query/AllProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// this line is used by starport scaffolding # 2
	Owner(context.Context, *QueryGetOwnerRequest) (*QueryGetOwnerResponse, error)
	OwnerAll(context.Context, *QueryAllOwnerRequest) (*QueryAllOwnerResponse, error)
	Property(context.Context, *QueryGetPropertyRequest) (*QueryGetPropertyResponse, error)
	PropertyAll(context.Context, *QueryAllPropertyRequest) (*QueryAllPropertyResponse, error)
	// Returns all properties from a specific owner
	AllProperties(context.Context, *QueryListAllPropertiesRequest) (*QueryListAllPropertiesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Owner(ctx context.Context, req *QueryGetOwnerRequest) (*QueryGetOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Owner not implemented")
}
func (*UnimplementedQueryServer) OwnerAll(ctx context.Context, req *QueryAllOwnerRequest) (*QueryAllOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OwnerAll not implemented")
}
func (*UnimplementedQueryServer) Property(ctx context.Context, req *QueryGetPropertyRequest) (*QueryGetPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Property not implemented")
}
func (*UnimplementedQueryServer) PropertyAll(ctx context.Context, req *QueryAllPropertyRequest) (*QueryAllPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyAll not implemented")
}
func (*UnimplementedQueryServer) AllProperties(ctx context.Context, req *QueryListAllPropertiesRequest) (*QueryListAllPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllProperties not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Owner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Owner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafaelsousa.realestate.property.Query/Owner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Owner(ctx, req.(*QueryGetOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OwnerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OwnerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafaelsousa.realestate.property.Query/OwnerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OwnerAll(ctx, req.(*QueryAllOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Property_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Property(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafaelsousa.realestate.property.Query/Property",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Property(ctx, req.(*QueryGetPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PropertyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PropertyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafaelsousa.realestate.property.Query/PropertyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PropertyAll(ctx, req.(*QueryAllPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListAllPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafaelsousa.realestate.property.Query/AllProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllProperties(ctx, req.(*QueryListAllPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rafaelsousa.realestate.property.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Owner",
			Handler:    _Query_Owner_Handler,
		},
		{
			MethodName: "OwnerAll",
			Handler:    _Query_OwnerAll_Handler,
		},
		{
			MethodName: "Property",
			Handler:    _Query_Property_Handler,
		},
		{
			MethodName: "PropertyAll",
			Handler:    _Query_PropertyAll_Handler,
		},
		{
			MethodName: "AllProperties",
			Handler:    _Query_AllProperties_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "property/query.proto",
}

func (m *QueryGetOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		for iNdEx := len(m.Owner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Owner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPropertyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPropertyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPropertyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPropertyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPropertyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPropertyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Property != nil {
		{
			size, err := m.Property.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPropertyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPropertyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPropertyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPropertyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPropertyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPropertyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Property) > 0 {
		for iNdEx := len(m.Property) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Property[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListAllPropertiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAllPropertiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAllPropertiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAddr) > 0 {
		i -= len(m.OwnerAddr)
		copy(dAtA[i:], m.OwnerAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OwnerAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListAllPropertiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAllPropertiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAllPropertiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Property) > 0 {
		for iNdEx := len(m.Property) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Property[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Owner) > 0 {
		for _, e := range m.Owner {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPropertyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPropertyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Property != nil {
		l = m.Property.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPropertyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPropertyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Property) > 0 {
		for _, e := range m.Property {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListAllPropertiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListAllPropertiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Property) > 0 {
		for _, e := range m.Property {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Owner{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner, &Owner{})
			if err := m.Owner[len(m.Owner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPropertyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPropertyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPropertyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPropertyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPropertyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPropertyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Property", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Property == nil {
				m.Property = &Property{}
			}
			if err := m.Property.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPropertyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPropertyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPropertyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPropertyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPropertyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPropertyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Property", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Property = append(m.Property, &Property{})
			if err := m.Property[len(m.Property)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAllPropertiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAllPropertiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAllPropertiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAllPropertiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAllPropertiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAllPropertiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Property", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Property = append(m.Property, &Property{})
			if err := m.Property[len(m.Property)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
