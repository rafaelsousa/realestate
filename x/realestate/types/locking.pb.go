// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: realestate/locking.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Locking struct {
	Id            uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner         string      `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	DateLocking   string      `protobuf:"bytes,3,opt,name=dateLocking,proto3" json:"dateLocking,omitempty"`
	DateUnlocking string      `protobuf:"bytes,4,opt,name=dateUnlocking,proto3" json:"dateUnlocking,omitempty"`
	Assets        *types.Coin `protobuf:"bytes,5,opt,name=assets,proto3" json:"assets,omitempty"`
	Property      uint64      `protobuf:"varint,6,opt,name=property,proto3" json:"property,omitempty"`
	Creator       string      `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Locking) Reset()         { *m = Locking{} }
func (m *Locking) String() string { return proto.CompactTextString(m) }
func (*Locking) ProtoMessage()    {}
func (*Locking) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6bd36b084d77fa, []int{0}
}
func (m *Locking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Locking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Locking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Locking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Locking.Merge(m, src)
}
func (m *Locking) XXX_Size() int {
	return m.Size()
}
func (m *Locking) XXX_DiscardUnknown() {
	xxx_messageInfo_Locking.DiscardUnknown(m)
}

var xxx_messageInfo_Locking proto.InternalMessageInfo

func (m *Locking) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Locking) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Locking) GetDateLocking() string {
	if m != nil {
		return m.DateLocking
	}
	return ""
}

func (m *Locking) GetDateUnlocking() string {
	if m != nil {
		return m.DateUnlocking
	}
	return ""
}

func (m *Locking) GetAssets() *types.Coin {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *Locking) GetProperty() uint64 {
	if m != nil {
		return m.Property
	}
	return 0
}

func (m *Locking) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Locking)(nil), "rafaelsousa.realestate.realestate.Locking")
}

func init() { proto.RegisterFile("realestate/locking.proto", fileDescriptor_dc6bd36b084d77fa) }

var fileDescriptor_dc6bd36b084d77fa = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0xeb, 0xde, 0xb6, 0xb9, 0xb8, 0x82, 0xc1, 0x62, 0x30, 0x1d, 0xac, 0x80, 0x18, 0x32,
	0xd9, 0x0a, 0xf0, 0x04, 0xb0, 0x22, 0x86, 0x48, 0x2c, 0x6c, 0x4e, 0x72, 0x28, 0x16, 0x69, 0x4e,
	0x64, 0xbb, 0x40, 0xdf, 0x82, 0xc7, 0x62, 0xec, 0xc8, 0x58, 0x25, 0x2f, 0x82, 0x9a, 0x04, 0x08,
	0x9b, 0xbf, 0xe3, 0xdf, 0xc7, 0x9f, 0x7e, 0xca, 0x2d, 0xe8, 0x02, 0x9c, 0xd7, 0x1e, 0x54, 0x81,
	0xd9, 0xb3, 0x29, 0x97, 0xb2, 0xb2, 0xe8, 0x91, 0x9d, 0x5a, 0xfd, 0xa8, 0xa1, 0x70, 0xb8, 0x76,
	0x5a, 0xfe, 0xa6, 0x06, 0xc7, 0x85, 0xc8, 0xd0, 0xad, 0xd0, 0xa9, 0x54, 0x3b, 0x50, 0x2f, 0x71,
	0x0a, 0x5e, 0xc7, 0x2a, 0x43, 0x53, 0x76, 0x2b, 0xce, 0x76, 0x84, 0x06, 0xb7, 0xdd, 0x52, 0x76,
	0x44, 0xc7, 0x26, 0xe7, 0x24, 0x24, 0xd1, 0x24, 0x19, 0x9b, 0x9c, 0x1d, 0xd3, 0x29, 0xbe, 0x96,
	0x60, 0xf9, 0x38, 0x24, 0xd1, 0x41, 0xd2, 0x01, 0x0b, 0xe9, 0x3c, 0xd7, 0x1e, 0xfa, 0x47, 0xfc,
	0x5f, 0x7b, 0x37, 0x1c, 0xb1, 0x73, 0x7a, 0xb8, 0xc7, 0xfb, 0xb2, 0xb7, 0xe5, 0x93, 0x36, 0xf3,
	0x77, 0xc8, 0x62, 0x3a, 0xd3, 0xce, 0x81, 0x77, 0x7c, 0x1a, 0x92, 0x68, 0x7e, 0x71, 0x22, 0x3b,
	0x55, 0xb9, 0x57, 0x95, 0xbd, 0xaa, 0xbc, 0x41, 0x53, 0x26, 0x7d, 0x90, 0x2d, 0xe8, 0xff, 0xca,
	0x62, 0x05, 0xd6, 0x6f, 0xf8, 0xac, 0xd5, 0xfc, 0x61, 0xc6, 0x69, 0x90, 0x59, 0xd0, 0x1e, 0x2d,
	0x0f, 0xda, 0xef, 0xbe, 0xf1, 0xfa, 0xee, 0xa3, 0x16, 0x64, 0x5b, 0x0b, 0xb2, 0xab, 0x05, 0x79,
	0x6f, 0xc4, 0x68, 0xdb, 0x88, 0xd1, 0x67, 0x23, 0x46, 0x0f, 0x57, 0x4b, 0xe3, 0x9f, 0xd6, 0xa9,
	0xcc, 0x70, 0xa5, 0x06, 0x55, 0xaa, 0x41, 0xe1, 0x6f, 0x43, 0xf0, 0x9b, 0x0a, 0x5c, 0x3a, 0x6b,
	0x9b, 0xbb, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xa8, 0x9c, 0xd2, 0x98, 0x01, 0x00, 0x00,
}

func (m *Locking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Locking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Locking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLocking(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Property != 0 {
		i = encodeVarintLocking(dAtA, i, uint64(m.Property))
		i--
		dAtA[i] = 0x30
	}
	if m.Assets != nil {
		{
			size, err := m.Assets.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DateUnlocking) > 0 {
		i -= len(m.DateUnlocking)
		copy(dAtA[i:], m.DateUnlocking)
		i = encodeVarintLocking(dAtA, i, uint64(len(m.DateUnlocking)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DateLocking) > 0 {
		i -= len(m.DateLocking)
		copy(dAtA[i:], m.DateLocking)
		i = encodeVarintLocking(dAtA, i, uint64(len(m.DateLocking)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLocking(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLocking(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLocking(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Locking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLocking(uint64(m.Id))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLocking(uint64(l))
	}
	l = len(m.DateLocking)
	if l > 0 {
		n += 1 + l + sovLocking(uint64(l))
	}
	l = len(m.DateUnlocking)
	if l > 0 {
		n += 1 + l + sovLocking(uint64(l))
	}
	if m.Assets != nil {
		l = m.Assets.Size()
		n += 1 + l + sovLocking(uint64(l))
	}
	if m.Property != 0 {
		n += 1 + sovLocking(uint64(m.Property))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLocking(uint64(l))
	}
	return n
}

func sovLocking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLocking(x uint64) (n int) {
	return sovLocking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Locking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Locking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Locking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateLocking", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateLocking = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateUnlocking", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateUnlocking = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Assets == nil {
				m.Assets = &types.Coin{}
			}
			if err := m.Assets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Property", wireType)
			}
			m.Property = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Property |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocking = fmt.Errorf("proto: unexpected end of group")
)
