// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: realestate/inspection.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Inspection struct {
	Id                uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Inspector         string      `protobuf:"bytes,2,opt,name=inspector,proto3" json:"inspector,omitempty"`
	Property          uint64      `protobuf:"varint,3,opt,name=property,proto3" json:"property,omitempty"`
	Fees              *types.Coin `protobuf:"bytes,4,opt,name=fees,proto3" json:"fees,omitempty"`
	InspectionResults string      `protobuf:"bytes,5,opt,name=inspectionResults,proto3" json:"inspectionResults,omitempty"`
	Creator           string      `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Inspection) Reset()         { *m = Inspection{} }
func (m *Inspection) String() string { return proto.CompactTextString(m) }
func (*Inspection) ProtoMessage()    {}
func (*Inspection) Descriptor() ([]byte, []int) {
	return fileDescriptor_04e6bb071c4738a3, []int{0}
}
func (m *Inspection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inspection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inspection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inspection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inspection.Merge(m, src)
}
func (m *Inspection) XXX_Size() int {
	return m.Size()
}
func (m *Inspection) XXX_DiscardUnknown() {
	xxx_messageInfo_Inspection.DiscardUnknown(m)
}

var xxx_messageInfo_Inspection proto.InternalMessageInfo

func (m *Inspection) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Inspection) GetInspector() string {
	if m != nil {
		return m.Inspector
	}
	return ""
}

func (m *Inspection) GetProperty() uint64 {
	if m != nil {
		return m.Property
	}
	return 0
}

func (m *Inspection) GetFees() *types.Coin {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *Inspection) GetInspectionResults() string {
	if m != nil {
		return m.InspectionResults
	}
	return ""
}

func (m *Inspection) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Inspection)(nil), "rafaelsousa.realestate.realestate.Inspection")
}

func init() { proto.RegisterFile("realestate/inspection.proto", fileDescriptor_04e6bb071c4738a3) }

var fileDescriptor_04e6bb071c4738a3 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe3, 0xfc, 0xf9, 0x0b, 0x35, 0x12, 0x12, 0x9e, 0x4c, 0x41, 0x56, 0x60, 0xca, 0x00,
	0xb6, 0x0a, 0x3c, 0x01, 0x4c, 0x2c, 0x0c, 0x19, 0xd9, 0x9c, 0xf4, 0x16, 0x2c, 0xa5, 0x71, 0xe4,
	0xeb, 0x20, 0xfa, 0x16, 0x3c, 0x16, 0x0b, 0x52, 0x47, 0x46, 0x94, 0xbc, 0x08, 0x6a, 0x08, 0x4d,
	0x24, 0x36, 0x1f, 0xfb, 0xf8, 0x9e, 0xef, 0x1e, 0x7a, 0xe2, 0x40, 0x17, 0x80, 0x5e, 0x7b, 0x50,
	0xa6, 0xc4, 0x0a, 0x72, 0x6f, 0x6c, 0x29, 0x2b, 0x67, 0xbd, 0x65, 0x67, 0x4e, 0x2f, 0x35, 0x14,
	0x68, 0x6b, 0xd4, 0x72, 0x30, 0x8e, 0x8e, 0x33, 0x91, 0x5b, 0x5c, 0x59, 0x54, 0x99, 0x46, 0x50,
	0x2f, 0xf3, 0x0c, 0xbc, 0x9e, 0xab, 0xdc, 0x9a, 0x7e, 0xc4, 0xf9, 0x07, 0xa1, 0xf4, 0x7e, 0x37,
	0x97, 0x1d, 0xd2, 0xd0, 0x2c, 0x38, 0x89, 0x49, 0x12, 0xa5, 0xa1, 0x59, 0xb0, 0x53, 0x3a, 0xed,
	0x53, 0xad, 0xe3, 0x61, 0x4c, 0x92, 0x69, 0x3a, 0x5c, 0xb0, 0x19, 0xdd, 0xaf, 0x9c, 0xad, 0xc0,
	0xf9, 0x35, 0xff, 0xd7, 0xfd, 0xd9, 0x69, 0x76, 0x49, 0xa3, 0x25, 0x00, 0xf2, 0x28, 0x26, 0xc9,
	0xc1, 0xd5, 0xb1, 0xfc, 0xe1, 0x90, 0x5b, 0x0e, 0xd9, 0x73, 0xc8, 0x3b, 0x6b, 0xca, 0xb4, 0xb3,
	0xb1, 0x0b, 0x7a, 0x34, 0xac, 0x97, 0x02, 0xd6, 0x85, 0x47, 0xfe, 0xbf, 0x0b, 0xfc, 0xfb, 0xc0,
	0x38, 0xdd, 0xcb, 0x1d, 0xe8, 0x2d, 0xd4, 0xa4, 0xf3, 0xfc, 0xca, 0xdb, 0x87, 0xf7, 0x46, 0x90,
	0x4d, 0x23, 0xc8, 0x57, 0x23, 0xc8, 0x5b, 0x2b, 0x82, 0x4d, 0x2b, 0x82, 0xcf, 0x56, 0x04, 0x8f,
	0x37, 0x4f, 0xc6, 0x3f, 0xd7, 0x99, 0xcc, 0xed, 0x4a, 0x8d, 0x7a, 0x53, 0xa3, 0x82, 0x5f, 0xc7,
	0xc2, 0xaf, 0x2b, 0xc0, 0x6c, 0xd2, 0xd5, 0x74, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x60,
	0x57, 0xe8, 0x88, 0x01, 0x00, 0x00,
}

func (m *Inspection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inspection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inspection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintInspection(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InspectionResults) > 0 {
		i -= len(m.InspectionResults)
		copy(dAtA[i:], m.InspectionResults)
		i = encodeVarintInspection(dAtA, i, uint64(len(m.InspectionResults)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Fees != nil {
		{
			size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInspection(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Property != 0 {
		i = encodeVarintInspection(dAtA, i, uint64(m.Property))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Inspector) > 0 {
		i -= len(m.Inspector)
		copy(dAtA[i:], m.Inspector)
		i = encodeVarintInspection(dAtA, i, uint64(len(m.Inspector)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintInspection(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInspection(dAtA []byte, offset int, v uint64) int {
	offset -= sovInspection(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Inspection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovInspection(uint64(m.Id))
	}
	l = len(m.Inspector)
	if l > 0 {
		n += 1 + l + sovInspection(uint64(l))
	}
	if m.Property != 0 {
		n += 1 + sovInspection(uint64(m.Property))
	}
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovInspection(uint64(l))
	}
	l = len(m.InspectionResults)
	if l > 0 {
		n += 1 + l + sovInspection(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovInspection(uint64(l))
	}
	return n
}

func sovInspection(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInspection(x uint64) (n int) {
	return sovInspection(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Inspection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInspection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inspection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inspection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inspector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inspector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Property", wireType)
			}
			m.Property = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Property |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInspection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInspection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &types.Coin{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InspectionResults", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InspectionResults = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInspection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInspection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInspection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInspection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInspection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInspection(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInspection
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInspection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInspection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInspection
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInspection
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInspection
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInspection        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInspection          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInspection = fmt.Errorf("proto: unexpected end of group")
)
